# Copyright (c) 2021 Leedehai. All rights reserved.
# Use of this source code is governed under the MIT license.
# -----
# Generated file. Do not modify manually.
# Source file: absl/base/BUILD.bazel

# absl/base:atomic_hook
source_set("atomic_hook") {
  public = ["internal/atomic_hook.h"]
  deps = [
    ":config",
    ":core_headers",
  ]
}

# absl/base:base
source_set("base") {
  public = [
    "call_once.h",
    "casts.h",
    "internal/cycleclock.h",
    "internal/low_level_scheduling.h",
    "internal/per_thread_tls.h",
    "internal/spinlock.h",
    "internal/sysinfo.h",
    "internal/thread_identity.h",
    "internal/tsan_mutex_interface.h",
    "internal/unscaledcycleclock.h",
  ]
  sources = [
    "internal/cycleclock.cc",
    "internal/spinlock.cc",
    "internal/sysinfo.cc",
    "internal/thread_identity.cc",
    "internal/unscaledcycleclock.cc",
  ]
  deps = [
    ":atomic_hook",
    ":base_internal",
    ":config",
    ":core_headers",
    ":dynamic_annotations",
    ":log_severity",
    ":raw_logging_internal",
    ":spinlock_wait",
    "$abseil/absl/meta:type_traits",
  ]
  ldflags = ["-pthread"]
}

# absl/base:base_internal
source_set("base_internal") {
  visibility = ["$abseil/*"]
  public = [
    "internal/hide_ptr.h",
    "internal/identity.h",
    "internal/inline_variable.h",
    "internal/invoke.h",
    "internal/scheduling_mode.h",
  ]
  deps = [
    ":config",
    "$abseil/absl/meta:type_traits",
  ]
}

# absl/base:config
source_set("config") {
  public = [
    "config.h",
    "options.h",
    "policy_checks.h",
  ]
}

# absl/base:core_headers
source_set("core_headers") {
  public = [
    "attributes.h",
    "const_init.h",
    "macros.h",
    "optimization.h",
    "port.h",
    "thread_annotations.h",
  ]
  sources = ["internal/thread_annotations.h"]
  deps = [":config"]
}

# absl/base:dynamic_annotations
source_set("dynamic_annotations") {
  public = ["dynamic_annotations.h"]
  sources = ["internal/dynamic_annotations.h"]
  deps = [
    ":config",
    ":core_headers",
  ]
}

# absl/base:endian
source_set("endian") {
  public = [
    "internal/endian.h",
    "internal/unaligned_access.h",
  ]
  deps = [
    ":base",
    ":config",
    ":core_headers",
  ]
}

# absl/base:errno_saver
source_set("errno_saver") {
  public = ["internal/errno_saver.h"]
  deps = [":config"]
}

# absl/base:exponential_biased
source_set("exponential_biased") {
  public = ["internal/exponential_biased.h"]
  sources = ["internal/exponential_biased.cc"]
  deps = [
    ":config",
    ":core_headers",
  ]
}

# absl/base:fast_type_id
source_set("fast_type_id") {
  public = ["internal/fast_type_id.h"]
  deps = [":config"]
}

# absl/base:log_severity
source_set("log_severity") {
  public = ["log_severity.h"]
  sources = ["log_severity.cc"]
  deps = [
    ":config",
    ":core_headers",
  ]
}

# absl/base:malloc_internal
source_set("malloc_internal") {
  visibility = ["$abseil/*"]
  public = [
    "internal/direct_mmap.h",
    "internal/low_level_alloc.h",
  ]
  sources = ["internal/low_level_alloc.cc"]
  deps = [
    ":base",
    ":base_internal",
    ":config",
    ":core_headers",
    ":dynamic_annotations",
    ":raw_logging_internal",
  ]
  ldflags = ["-pthread"]
}

# absl/base:periodic_sampler
source_set("periodic_sampler") {
  public = ["internal/periodic_sampler.h"]
  sources = ["internal/periodic_sampler.cc"]
  deps = [
    ":core_headers",
    ":exponential_biased",
  ]
}

# absl/base:pretty_function
source_set("pretty_function") {
  public = ["internal/pretty_function.h"]
}

# absl/base:raw_logging_internal
source_set("raw_logging_internal") {
  visibility = ["$abseil/*"]
  public = ["internal/raw_logging.h"]
  sources = ["internal/raw_logging.cc"]
  deps = [
    ":atomic_hook",
    ":config",
    ":core_headers",
    ":log_severity",
  ]
}

# absl/base:spinlock_wait
source_set("spinlock_wait") {
  public = ["internal/spinlock_wait.h"]
  sources = [
    "internal/spinlock_akaros.inc",
    "internal/spinlock_linux.inc",
    "internal/spinlock_posix.inc",
    "internal/spinlock_wait.cc",
    "internal/spinlock_win32.inc",
  ]
  deps = [
    ":base_internal",
    ":core_headers",
    ":errno_saver",
  ]
}

# absl/base:strerror
source_set("strerror") {
  public = ["internal/strerror.h"]
  sources = ["internal/strerror.cc"]
  deps = [
    ":config",
    ":core_headers",
    ":errno_saver",
  ]
}

# absl/base:throw_delegate
source_set("throw_delegate") {
  public = ["internal/throw_delegate.h"]
  sources = ["internal/throw_delegate.cc"]
  deps = [
    ":config",
    ":raw_logging_internal",
  ]
}
