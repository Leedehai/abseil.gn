# Copyright (c) 2021 Leedehai. All rights reserved.
# Use of this source code is governed under the MIT license.
# -----
# Generated file. Do not modify manually.
# Source file: absl/strings/BUILD.bazel

# absl/strings:cord
source_set("cord") {
  include_dirs = ["$abseil/"]
  public = ["cord.h"]
  sources = ["cord.cc"]
  deps = [
    ":cord_internal",
    ":cordz_functions",
    ":cordz_info",
    ":cordz_statistics",
    ":cordz_update_scope",
    ":cordz_update_tracker",
    ":internal",
    ":str_format",
    ":strings",
    "$abseil/absl/base:base",
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/base:endian",
    "$abseil/absl/base:raw_logging_internal",
    "$abseil/absl/container:fixed_array",
    "$abseil/absl/container:inlined_vector",
    "$abseil/absl/functional:function_ref",
    "$abseil/absl/meta:type_traits",
    "$abseil/absl/types:optional",
  ]
  cflags = ["-Wno-gcc-compat"]
}

# absl/strings:cord_internal
source_set("cord_internal") {
  include_dirs = ["$abseil/"]
  visibility = ["$abseil/*"]
  public = [
    "internal/cord_internal.h",
    "internal/cord_rep_btree.h",
    "internal/cord_rep_btree_navigator.h",
    "internal/cord_rep_btree_reader.h",
    "internal/cord_rep_consume.h",
    "internal/cord_rep_flat.h",
    "internal/cord_rep_ring.h",
    "internal/cord_rep_ring_reader.h",
  ]
  sources = [
    "internal/cord_internal.cc",
    "internal/cord_rep_btree.cc",
    "internal/cord_rep_btree_navigator.cc",
    "internal/cord_rep_btree_reader.cc",
    "internal/cord_rep_consume.cc",
    "internal/cord_rep_ring.cc",
  ]
  deps = [
    ":strings",
    "$abseil/absl/base:base_internal",
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/base:endian",
    "$abseil/absl/base:raw_logging_internal",
    "$abseil/absl/base:throw_delegate",
    "$abseil/absl/container:compressed_tuple",
    "$abseil/absl/container:inlined_vector",
    "$abseil/absl/container:layout",
    "$abseil/absl/functional:function_ref",
    "$abseil/absl/meta:type_traits",
    "$abseil/absl/types:span",
  ]
  cflags = ["-Wno-gcc-compat"]
}

# absl/strings:cordz_functions
source_set("cordz_functions") {
  include_dirs = ["$abseil/"]
  public = ["internal/cordz_functions.h"]
  sources = ["internal/cordz_functions.cc"]
  deps = [
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/base:exponential_biased",
    "$abseil/absl/base:raw_logging_internal",
  ]
  cflags = ["-Wno-gcc-compat"]
}

# absl/strings:cordz_handle
source_set("cordz_handle") {
  include_dirs = ["$abseil/"]
  public = ["internal/cordz_handle.h"]
  sources = ["internal/cordz_handle.cc"]
  deps = [
    "$abseil/absl/base:base",
    "$abseil/absl/base:config",
    "$abseil/absl/base:raw_logging_internal",
    "$abseil/absl/synchronization:synchronization",
  ]
  cflags = ["-Wno-gcc-compat"]
}

# absl/strings:cordz_info
source_set("cordz_info") {
  include_dirs = ["$abseil/"]
  public = ["internal/cordz_info.h"]
  sources = ["internal/cordz_info.cc"]
  deps = [
    ":cord_internal",
    ":cordz_functions",
    ":cordz_handle",
    ":cordz_statistics",
    ":cordz_update_tracker",
    "$abseil/absl/base:base",
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/base:raw_logging_internal",
    "$abseil/absl/container:inlined_vector",
    "$abseil/absl/debugging:stacktrace",
    "$abseil/absl/synchronization:synchronization",
    "$abseil/absl/types:span",
  ]
  cflags = ["-Wno-gcc-compat"]
}

# absl/strings:cordz_sample_token
source_set("cordz_sample_token") {
  include_dirs = ["$abseil/"]
  public = ["internal/cordz_sample_token.h"]
  sources = ["internal/cordz_sample_token.cc"]
  deps = [
    ":cordz_handle",
    ":cordz_info",
    "$abseil/absl/base:config",
  ]
  cflags = ["-Wno-gcc-compat"]
}

# absl/strings:cordz_statistics
source_set("cordz_statistics") {
  include_dirs = ["$abseil/"]
  public = ["internal/cordz_statistics.h"]
  deps = [
    ":cordz_update_tracker",
    "$abseil/absl/base:config",
  ]
  cflags = ["-Wno-gcc-compat"]
}

# absl/strings:cordz_update_scope
source_set("cordz_update_scope") {
  include_dirs = ["$abseil/"]
  public = ["internal/cordz_update_scope.h"]
  deps = [
    ":cord_internal",
    ":cordz_info",
    ":cordz_update_tracker",
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
  ]
  cflags = ["-Wno-gcc-compat"]
}

# absl/strings:cordz_update_tracker
source_set("cordz_update_tracker") {
  include_dirs = ["$abseil/"]
  public = ["internal/cordz_update_tracker.h"]
  deps = ["$abseil/absl/base:config"]
  cflags = ["-Wno-gcc-compat"]
}

# absl/strings:internal
source_set("internal") {
  include_dirs = ["$abseil/"]
  visibility = ["$abseil/*"]
  public = [
    "internal/char_map.h",
    "internal/escaping.h",
    "internal/ostringstream.h",
    "internal/resize_uninitialized.h",
    "internal/utf8.h",
  ]
  sources = [
    "internal/escaping.cc",
    "internal/ostringstream.cc",
    "internal/utf8.cc",
  ]
  deps = [
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/base:endian",
    "$abseil/absl/base:raw_logging_internal",
    "$abseil/absl/meta:type_traits",
  ]
  cflags = ["-Wno-gcc-compat"]
}

# absl/strings:str_format
source_set("str_format") {
  include_dirs = ["$abseil/"]
  public = ["str_format.h"]
  deps = [":str_format_internal"]
  cflags = ["-Wno-gcc-compat"]
}

# absl/strings:str_format_internal
source_set("str_format_internal") {
  include_dirs = ["$abseil/"]
  visibility = ["$abseil/*"]
  public = [
    "internal/str_format/arg.h",
    "internal/str_format/bind.h",
    "internal/str_format/checker.h",
    "internal/str_format/extension.h",
    "internal/str_format/float_conversion.h",
    "internal/str_format/output.h",
    "internal/str_format/parser.h",
  ]
  sources = [
    "internal/str_format/arg.cc",
    "internal/str_format/bind.cc",
    "internal/str_format/extension.cc",
    "internal/str_format/float_conversion.cc",
    "internal/str_format/output.cc",
    "internal/str_format/parser.cc",
  ]
  deps = [
    ":strings",
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/functional:function_ref",
    "$abseil/absl/meta:type_traits",
    "$abseil/absl/numeric:bits",
    "$abseil/absl/numeric:int128",
    "$abseil/absl/numeric:representation",
    "$abseil/absl/types:optional",
    "$abseil/absl/types:span",
  ]
  cflags = ["-Wno-gcc-compat"]
}

# absl/strings:strings
source_set("strings") {
  include_dirs = ["$abseil/"]
  public = [
    "ascii.h",
    "charconv.h",
    "escaping.h",
    "internal/string_constant.h",
    "match.h",
    "numbers.h",
    "str_cat.h",
    "str_join.h",
    "str_replace.h",
    "str_split.h",
    "string_view.h",
    "strip.h",
    "substitute.h",
  ]
  sources = [
    "ascii.cc",
    "charconv.cc",
    "escaping.cc",
    "internal/charconv_bigint.cc",
    "internal/charconv_bigint.h",
    "internal/charconv_parse.cc",
    "internal/charconv_parse.h",
    "internal/memutil.cc",
    "internal/memutil.h",
    "internal/stl_type_traits.h",
    "internal/str_join_internal.h",
    "internal/str_split_internal.h",
    "match.cc",
    "numbers.cc",
    "str_cat.cc",
    "str_replace.cc",
    "str_split.cc",
    "string_view.cc",
    "substitute.cc",
  ]
  deps = [
    ":internal",
    "$abseil/absl/base:base",
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/base:endian",
    "$abseil/absl/base:raw_logging_internal",
    "$abseil/absl/base:throw_delegate",
    "$abseil/absl/memory:memory",
    "$abseil/absl/meta:type_traits",
    "$abseil/absl/numeric:bits",
    "$abseil/absl/numeric:int128",
  ]
  cflags = ["-Wno-gcc-compat"]
}
