# Copyright (c) 2020 Leedehai. All rights reserved.
# Use of this source code is governed under the MIT license.
# Generated file. Do not modify manually.
# upstream: 2020-08-07T17:37:02-04:00 ce4bc927755fdf0ed03d679d9c7fa041175bb3cb
# file: absl/container/BUILD.bazel

# absl/container/BUILD.bazel:29
source_set("compressed_tuple") {
  public = ["internal/compressed_tuple.h"]
  deps = ["$abseil/absl/utility"]
}

# absl/container/BUILD.bazel:55
source_set("fixed_array") {
  public = ["fixed_array.h"]
  deps = [
    ":compressed_tuple",
    "$abseil/absl/algorithm",
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/base:dynamic_annotations",
    "$abseil/absl/base:throw_delegate",
    "$abseil/absl/memory",
  ]
}

# absl/container/BUILD.bazel:112
source_set("inlined_vector_internal") {
  visibility = ["$abseil/:*"]
  public = ["internal/inlined_vector.h"]
  deps = [
    ":compressed_tuple",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/memory",
    "$abseil/absl/meta:type_traits",
    "$abseil/absl/types:span",
  ]
}

# absl/container/BUILD.bazel:126
source_set("inlined_vector") {
  public = ["inlined_vector.h"]
  deps = [
    ":inlined_vector_internal",
    "$abseil/absl/algorithm",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/base:throw_delegate",
    "$abseil/absl/memory",
  ]
}

# absl/container/BUILD.bazel:140
source_set("counting_allocator") {
  testonly = true
  public = ["internal/counting_allocator.h"]
  deps = ["$abseil/absl/base:config"]
}

# absl/container/BUILD.bazel:197
source_set("test_instance_tracker") {
  testonly = true
  public = ["internal/test_instance_tracker.h"]
  sources = ["internal/test_instance_tracker.cc"]
  deps = ["$abseil/absl/types:compare"]
}

# absl/container/BUILD.bazel:235
source_set("flat_hash_map") {
  public = ["flat_hash_map.h"]
  deps = [
    ":container_memory",
    ":hash_function_defaults",
    ":raw_hash_map",
    "$abseil/absl/algorithm:container",
    "$abseil/absl/memory",
  ]
}

# absl/container/BUILD.bazel:268
source_set("flat_hash_set") {
  public = ["flat_hash_set.h"]
  deps = [
    ":container_memory",
    ":hash_function_defaults",
    ":raw_hash_set",
    "$abseil/absl/algorithm:container",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/memory",
  ]
}

# absl/container/BUILD.bazel:303
source_set("node_hash_map") {
  public = ["node_hash_map.h"]
  deps = [
    ":container_memory",
    ":hash_function_defaults",
    ":node_hash_policy",
    ":raw_hash_map",
    "$abseil/absl/algorithm:container",
    "$abseil/absl/memory",
  ]
}

# absl/container/BUILD.bazel:336
source_set("node_hash_set") {
  public = ["node_hash_set.h"]
  deps = [
    ":hash_function_defaults",
    ":node_hash_policy",
    ":raw_hash_set",
    "$abseil/absl/algorithm:container",
    "$abseil/absl/memory",
  ]
}

# absl/container/BUILD.bazel:366
source_set("container_memory") {
  public = ["internal/container_memory.h"]
  deps = [
    "$abseil/absl/base:config",
    "$abseil/absl/memory",
    "$abseil/absl/meta:type_traits",
    "$abseil/absl/utility",
  ]
}

# absl/container/BUILD.bazel:393
source_set("hash_function_defaults") {
  public = ["internal/hash_function_defaults.h"]
  deps = [
    "$abseil/absl/base:config",
    "$abseil/absl/hash",
    "$abseil/absl/strings",
    "$abseil/absl/strings:cord",
  ]
}

# absl/container/BUILD.bazel:423
source_set("hash_generator_testing") {
  testonly = true
  public = ["internal/hash_generator_testing.h"]
  sources = ["internal/hash_generator_testing.cc"]
  deps = [
    ":hash_policy_testing",
    "$abseil/absl/memory",
    "$abseil/absl/meta:type_traits",
    "$abseil/absl/strings",
  ]
}

# absl/container/BUILD.bazel:438
source_set("hash_policy_testing") {
  testonly = true
  public = ["internal/hash_policy_testing.h"]
  deps = [
    "$abseil/absl/hash",
    "$abseil/absl/strings",
  ]
}

# absl/container/BUILD.bazel:461
source_set("hash_policy_traits") {
  public = ["internal/hash_policy_traits.h"]
  deps = ["$abseil/absl/meta:type_traits"]
}

# absl/container/BUILD.bazel:480
source_set("hashtable_debug") {
  public = ["internal/hashtable_debug.h"]
  deps = [":hashtable_debug_hooks"]
}

# absl/container/BUILD.bazel:490
source_set("hashtable_debug_hooks") {
  public = ["internal/hashtable_debug_hooks.h"]
  deps = ["$abseil/absl/base:config"]
}

# absl/container/BUILD.bazel:500
source_set("hashtablez_sampler") {
  public = ["internal/hashtablez_sampler.h"]
  sources = [
    "internal/hashtablez_sampler.cc",
    "internal/hashtablez_sampler_force_weak_definition.cc",
  ]
  deps = [
    ":have_sse",
    "$abseil/absl/base",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/base:exponential_biased",
    "$abseil/absl/debugging:stacktrace",
    "$abseil/absl/memory",
    "$abseil/absl/synchronization",
    "$abseil/absl/utility",
  ]
}

# absl/container/BUILD.bazel:536
source_set("node_hash_policy") {
  public = ["internal/node_hash_policy.h"]
  deps = ["$abseil/absl/base:config"]
}

# absl/container/BUILD.bazel:556
source_set("raw_hash_map") {
  public = ["internal/raw_hash_map.h"]
  deps = [
    ":container_memory",
    ":raw_hash_set",
    "$abseil/absl/base:throw_delegate",
  ]
}

# absl/container/BUILD.bazel:568
source_set("have_sse") {
  public = ["internal/have_sse.h"]
}

# absl/container/BUILD.bazel:576
source_set("common") {
  public = ["internal/common.h"]
  deps = [
    "$abseil/absl/meta:type_traits",
    "$abseil/absl/types:optional",
  ]
}

# absl/container/BUILD.bazel:587
source_set("raw_hash_set") {
  public = ["internal/raw_hash_set.h"]
  sources = ["internal/raw_hash_set.cc"]
  deps = [
    ":common",
    ":compressed_tuple",
    ":container_memory",
    ":hash_policy_traits",
    ":hashtable_debug_hooks",
    ":hashtablez_sampler",
    ":have_sse",
    ":layout",
    "$abseil/absl/base:bits",
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/base:endian",
    "$abseil/absl/memory",
    "$abseil/absl/meta:type_traits",
    "$abseil/absl/utility",
  ]
}

# absl/container/BUILD.bazel:647
source_set("layout") {
  public = ["internal/layout.h"]
  deps = [
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/meta:type_traits",
    "$abseil/absl/strings",
    "$abseil/absl/types:span",
    "$abseil/absl/utility",
  ]
}

# absl/container/BUILD.bazel:680
source_set("tracked") {
  testonly = true
  public = ["internal/tracked.h"]
  deps = ["$abseil/absl/base:config"]
}

# absl/container/BUILD.bazel:691
source_set("unordered_map_constructor_test") {
  testonly = true
  public = ["internal/unordered_map_constructor_test.h"]
  deps = [
    ":hash_generator_testing",
    ":hash_policy_testing",
    "@com_google_googletest/:gtest",
  ]
}

# absl/container/BUILD.bazel:704
source_set("unordered_map_lookup_test") {
  testonly = true
  public = ["internal/unordered_map_lookup_test.h"]
  deps = [
    ":hash_generator_testing",
    ":hash_policy_testing",
    "@com_google_googletest/:gtest",
  ]
}

# absl/container/BUILD.bazel:717
source_set("unordered_map_modifiers_test") {
  testonly = true
  public = ["internal/unordered_map_modifiers_test.h"]
  deps = [
    ":hash_generator_testing",
    ":hash_policy_testing",
    "@com_google_googletest/:gtest",
  ]
}

# absl/container/BUILD.bazel:730
source_set("unordered_set_constructor_test") {
  testonly = true
  public = ["internal/unordered_set_constructor_test.h"]
  deps = [
    ":hash_generator_testing",
    ":hash_policy_testing",
    "@com_google_googletest/:gtest",
    "$abseil/absl/meta:type_traits",
  ]
}

# absl/container/BUILD.bazel:744
source_set("unordered_set_members_test") {
  testonly = true
  public = ["internal/unordered_set_members_test.h"]
  deps = [
    "@com_google_googletest/:gtest",
    "$abseil/absl/meta:type_traits",
  ]
}

# absl/container/BUILD.bazel:756
source_set("unordered_map_members_test") {
  testonly = true
  public = ["internal/unordered_map_members_test.h"]
  deps = [
    "@com_google_googletest/:gtest",
    "$abseil/absl/meta:type_traits",
  ]
}

# absl/container/BUILD.bazel:768
source_set("unordered_set_lookup_test") {
  testonly = true
  public = ["internal/unordered_set_lookup_test.h"]
  deps = [
    ":hash_generator_testing",
    ":hash_policy_testing",
    "@com_google_googletest/:gtest",
  ]
}

# absl/container/BUILD.bazel:781
source_set("unordered_set_modifiers_test") {
  testonly = true
  public = ["internal/unordered_set_modifiers_test.h"]
  deps = [
    ":hash_generator_testing",
    ":hash_policy_testing",
    "@com_google_googletest/:gtest",
  ]
}

# absl/container/BUILD.bazel:824
source_set("btree") {
  public = [
    "btree_map.h",
    "btree_set.h",
  ]
  sources = [
    "internal/btree.h",
    "internal/btree_container.h",
  ]
  deps = [
    ":common",
    ":compressed_tuple",
    ":container_memory",
    ":layout",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/base:throw_delegate",
    "$abseil/absl/memory",
    "$abseil/absl/meta:type_traits",
    "$abseil/absl/strings",
    "$abseil/absl/strings:cord",
    "$abseil/absl/types:compare",
    "$abseil/absl/utility",
  ]
}

# absl/container/BUILD.bazel:853
source_set("btree_test_common") {
  testonly = true
  public = ["btree_test.h"]
  deps = [
    ":btree",
    ":flat_hash_set",
    "$abseil/absl/strings",
    "$abseil/absl/strings:cord",
    "$abseil/absl/time",
  ]
}
