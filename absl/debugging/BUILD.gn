# Copyright (c) 2021 Leedehai. All rights reserved.
# Use of this source code is governed under the MIT license.
# -----
# Generated file. Do not modify manually.
# Source file: absl/debugging/BUILD.bazel

# absl/debugging:debugging_internal
source_set("debugging_internal") {
  include_dirs = ["$abseil/"]
  visibility = ["$abseil/*"]
  public = [
    "internal/address_is_readable.h",
    "internal/elf_mem_image.h",
    "internal/vdso_support.h",
  ]
  sources = [
    "internal/address_is_readable.cc",
    "internal/elf_mem_image.cc",
    "internal/vdso_support.cc",
  ]
  deps = [
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/base:dynamic_annotations",
    "$abseil/absl/base:errno_saver",
    "$abseil/absl/base:raw_logging_internal",
  ]
  cflags = ["-Wno-gcc-compat"]
}

# absl/debugging:demangle_internal
source_set("demangle_internal") {
  include_dirs = ["$abseil/"]
  visibility = ["$abseil/*"]
  public = ["internal/demangle.h"]
  sources = ["internal/demangle.cc"]
  deps = [
    "$abseil/absl/base:base",
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
  ]
  cflags = ["-Wno-gcc-compat"]
}

# absl/debugging:examine_stack
source_set("examine_stack") {
  include_dirs = ["$abseil/"]
  public = ["internal/examine_stack.h"]
  sources = ["internal/examine_stack.cc"]
  deps = [
    ":stacktrace",
    ":symbolize",
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/base:raw_logging_internal",
  ]
  cflags = ["-Wno-gcc-compat"]
}

# absl/debugging:failure_signal_handler
source_set("failure_signal_handler") {
  include_dirs = ["$abseil/"]
  public = ["failure_signal_handler.h"]
  sources = ["failure_signal_handler.cc"]
  deps = [
    ":examine_stack",
    ":stacktrace",
    "$abseil/absl/base:base",
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/base:errno_saver",
    "$abseil/absl/base:raw_logging_internal",
  ]
  cflags = ["-Wno-gcc-compat"]
}

# absl/debugging:leak_check
source_set("leak_check") {
  include_dirs = ["$abseil/"]
  public = ["leak_check.h"]
  sources = ["leak_check.cc"]
  deps = [
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
  ]
}

# absl/debugging:leak_check_disable
source_set("leak_check_disable") {
  include_dirs = ["$abseil/"]
  sources = ["leak_check_disable.cc"]
  deps = ["$abseil/absl/base:config"]
}

# absl/debugging:stacktrace
source_set("stacktrace") {
  include_dirs = ["$abseil/"]
  public = ["stacktrace.h"]
  sources = [
    "internal/stacktrace_aarch64-inl.inc",
    "internal/stacktrace_arm-inl.inc",
    "internal/stacktrace_config.h",
    "internal/stacktrace_emscripten-inl.inc",
    "internal/stacktrace_generic-inl.inc",
    "internal/stacktrace_powerpc-inl.inc",
    "internal/stacktrace_unimplemented-inl.inc",
    "internal/stacktrace_win32-inl.inc",
    "internal/stacktrace_x86-inl.inc",
    "stacktrace.cc",
  ]
  deps = [
    ":debugging_internal",
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
  ]
  cflags = ["-Wno-gcc-compat"]
}

# absl/debugging:symbolize
source_set("symbolize") {
  include_dirs = ["$abseil/"]
  public = [
    "internal/symbolize.h",
    "symbolize.h",
  ]
  sources = [
    "symbolize.cc",
    "symbolize_darwin.inc",
    "symbolize_elf.inc",
    "symbolize_emscripten.inc",
    "symbolize_unimplemented.inc",
    "symbolize_win32.inc",
  ]
  deps = [
    ":debugging_internal",
    ":demangle_internal",
    "$abseil/absl/base:base",
    "$abseil/absl/base:config",
    "$abseil/absl/base:core_headers",
    "$abseil/absl/base:dynamic_annotations",
    "$abseil/absl/base:malloc_internal",
    "$abseil/absl/base:raw_logging_internal",
    "$abseil/absl/strings:strings",
  ]
  cflags = ["-Wno-gcc-compat"]
}
